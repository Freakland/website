{
  "version": "1.5.3",
  "name": "express-sitemap",
  "description": "sitemap and robots for expressjs",
  "keywords": [
    "sitemap",
    "robots",
    "routing",
    "express"
  ],
  "preferGlobal": false,
  "homepage": "http://supergiovane.tk/#/express-sitemap",
  "author": {
    "name": "hex7c0",
    "email": "hex7c0@gmail.com",
    "url": "http://hex7c0.tk/"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/hex7c0/express-sitemap.git"
  },
  "bugs": {
    "url": "https://github.com/hex7c0/express-sitemap/issues",
    "email": "hex7c0@gmail.com"
  },
  "main": "index.min.js",
  "dependencies": {
    "tickle": "1.1.9",
    "setheaders": "0.1.1"
  },
  "devDependencies": {
    "coveralls": "~2.11",
    "express": "~4.12",
    "istanbul": "~0.3",
    "mocha": "~2.1",
    "grunt-contrib-clean": "~0.6",
    "grunt-contrib-uglify": "~0.8",
    "grunt-contrib-jshint": "~0.11",
    "grunt-endline": "~0.2",
    "supertest": "~0.15"
  },
  "engines": {
    "node": ">=0.10"
  },
  "scripts": {
    "prepublish": "npm prune",
    "test": "npm run express4 && npm install express@3 && npm run express3",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- test/*",
    "express3": "mocha --bail --check-leaks",
    "express4": "mocha test/*"
  },
  "license": "GPLv3",
  "readme": "# [express-sitemap](http://supergiovane.tk/#/express-sitemap)\n\n[![NPM version](https://img.shields.io/npm/v/express-sitemap.svg)](https://www.npmjs.com/package/express-sitemap)\n[![Linux Status](https://img.shields.io/travis/hex7c0/express-sitemap.svg?label=linux)](https://travis-ci.org/hex7c0/express-sitemap)\n[![Windows Status](https://img.shields.io/appveyor/ci/hex7c0/express-sitemap.svg?label=windows)](https://ci.appveyor.com/project/hex7c0/express-sitemap)\n[![Dependency Status](https://img.shields.io/david/hex7c0/express-sitemap.svg)](https://david-dm.org/hex7c0/express-sitemap)\n[![Coveralls](https://img.shields.io/coveralls/hex7c0/express-sitemap.svg)](https://coveralls.io/r/hex7c0/express-sitemap)\n\nSitemap and Robots for [expressjs](http://expressjs.com/)\n\n## Installation\n\nInstall through NPM\n\n```bash\nnpm install express-sitemap\n```\nor\n```bash\ngit clone git://github.com/hex7c0/express-sitemap.git\n```\n\n## API\n\ninside expressjs project\n```js\nvar sitemap = require('express-sitemap')();\n\nvar app = require('express')();\n\nsitemap.generate(app);\n```\n\n### Methods\n\nif you want generate your own url\n```js\nvar sitemap = require('express-sitemap');\n\nsitemap({\n    map: {\n        '/foo': ['get'],\n        '/foo2': ['get','post'],\n        '/admin': ['get'],\n        '/backdoor': [],\n    },\n    route: {\n        '/foo': {\n            lastmod: '2014-06-20',\n            changefreq: 'always',\n            priority: 1.0,\n        },\n        '/admin': {\n            disallow: true,\n        },\n        '/backdoor': {\n            hide: true,\n        },\n    },\n}).XMLtoFile();\n```\n\nand this will be sitemap.xml\n```xml\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n    <url>\n        <loc>http://127.0.0.1/foo</loc>\n        <lastmod>2014-06-19</lastmod>\n        <changefreq>always</changefreq>\n        <priority>1</priority>\n    </url>\n    <url>\n        <loc>http://127.0.0.1/foo2</loc>\n    </url>\n</urlset>\n```\n\nand this will be robots.txt\n```txt\nUser-agent: *\nDisallow: /admin\n```\n\nreset prototype Object for sitemap\n```js\nsitemap.reset();\n```\n\ngenerate sitemap (wrapper)\n```js\nsitemap.generate(app);\n```\n\ngenerate sitemap from express 4.x configuration. Add an array with Router path if you want use nested callback\n```js\nsitemap.generate4(app, [Router]);\n```\n\ngenerate sitemap from express 3.x configuration\n```js\nsitemap.generate3(app);\n```\n\ngenerate prototype Object for sitemap if you use middleware or dynamic building\n```js\nsitemap.tickle();\n```\n\nwrite sitemap Object to file (set pathname inside module configuration or like argument)\n```js\nsitemap.XMLtoFile([path]);\n```\n\nwrite robots.txt to file (set pathname inside module configuration or like argument)\n```js\nsitemap.TXTtoFile([path]);\n```\n\nwrite both to files\n```js\nsitemap.toFile();\n```\n\nstream sitemap to web\n```js\nsitemap.XMLtoWeb(res);\n```\n\nstream robots.txt to web\n```js\nsitemap.TXTtoWeb(res);\n```\n\n### sitemap(options)\n\n#### options\n\n - `http` - **String** Website HTTP protocol (http | https) *(default \"http\")*\n - `cache` - **Integer** Enable cache integration, refresh map after this millisecond value *(default \"false\")*\n - `url` - **String** Website URL *(default \"127.0.0.1\")*\n - `port` - **Number** Website Port *(default \"80\")*\n - `sitemap` - **String** Name of sitemap file *(default \"sitemap.xml\")*\n - `robots` - **String** Name of robots file *(default \"robots.txt\")*\n - `route` - **Object** Add extra information to sitemap related to this [documentation](http://www.sitemaps.org/protocol.html#xmlTagDefinitions) *(default \"disabled\")*\n  - `lastmod` - **Date** Integrity not controlled\n  - `changefreq` - **String** Integrity not controlled\n  - `priority` - **Float** Integrity not controlled\n  - `disallow` - **Boolean** Flag for disallow this route from parsing, and save into `robots.txt` *(default \"false\")*\n  - `hide` - **Boolean** Flag for hide this route from globally parsing (no .xml or .txt) *(default \"false\")*\n - `map` - **Object** Force route (<loc>) detection and building *(default \"disabled\")*\n - `generate` - **Object** Fastly generate sitemap from express app *(default \"disabled\")*\n\nyou can use `route: {'ALL': {} }` if you want propagate extra information to all your urls\n\n## Examples\n\nTake a look at my [examples](examples)\n\n### [License GPLv3](LICENSE)\n",
  "readmeFilename": "README.md",
  "_id": "express-sitemap@1.5.3",
  "_shasum": "631a4b6752b75626d93d93041d0f32f6c82f633a",
  "_from": "express-sitemap@1.5.3",
  "_resolved": "https://registry.npmjs.org/express-sitemap/-/express-sitemap-1.5.3.tgz"
}
